name: Release
on:
  push:
    branches:
      - dev

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
env:
  # Use docker.io for Docker Hub if empty
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository_owner }}/${{ github.event.repository.name }}:${{ github.sha }}

jobs:
  push_to_registry:
    runs-on: ubuntu-22.04
    steps:
      # Checkout latest or specific tag
      - name: checkout
        uses: actions/checkout@v4

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.repository_owner }}
          password: ${{ secrets.PAT }}

      # Build and push new docker image, skip for manual redeploy other than 'latest'
      - name: Build and push Docker images
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile.prod
          push: true
          tags: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}

  deploy_via_ssh:
    needs: push_to_registry
    runs-on: ubuntu-22.04
    steps:
      # Checkout latest or specific tag
      - name: checkout
        uses: actions/checkout@v4

      # create .env file
      - name: create .env file
        run: |
          touch .env
          echo "REGISTRY=${{ env.REGISTRY }}" >> .env
          echo "IMAGE_NAME=${{ env.IMAGE_NAME }}" >> .env
          echo PG_DB=${{ secrets.PG_DB }} >> .env
          echo PG_USER=${{ secrets.PG_USER }} >> .env
          echo POSTGRES_USER=${{ secrets.POSTGRES_USER }} >> .env
          echo POSTGRES_DB=${{ secrets.POSTGRES_DB }} >> .env
          echo POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }} >> .env
          echo DEV_DB_DSN=${{ secrets.DEV_DB_DSN }} >> .env
          echo BREVO_API_KEY=${{ secrets.BREVO_API_KEY }} >> .env
          echo SMTP_PASSWORD=${{ secrets.SMTP_PASSWORD }} >> .env
          echo HTTP_PORT=${{ secrets.DEV_HTTP_PORT }} >> .env
          echo BASIC_AUTH_HASHED_PASSWORD=${{ secrets.BASIC_AUTH_HASHED_PASSWORD }} >> .env
          echo NOTIFICATIONS_EMAIL=${{ secrets.NOTIFICATIONS_EMAIL }} >> .env

      # Copy docker-compose and .env files to target server
      - name: copy files to target server via scp
        uses: appleboy/scp-action@v0.1.5
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          port: 22
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "./compose.yml,.env"
          target: "~/.deploy/${{ github.event.repository.name }}/"


       # Deploy Docker image with your application using `docker compose up app` remotely
      - name: remote docker-compose up via ssh
        uses: appleboy/ssh-action@v0.1.5
        env:
          APPTOKEN: ${{ secrets.PAT }}
          USERNAME: ${{ secrets.SSH_USER }}
          REGISTRY: ${{ env.REGISTRY }}
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: 22
          envs: APPTOKEN,USERNAME, REGISTRY, IMAGE_NAME
          script: |
            echo $APPTOKEN | docker login ghcr.io -u $USERNAME --password-stdin
            cd ~/.deploy/${{ github.event.repository.name }}
            docker compose up prod  -d
