# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
services:
  dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    env_file:
      - .env
    ports:
      - 4000:4000
    volumes:
      - ./:/src # Mount the current directory as /app in the container
    networks:
      - db_network
    depends_on:
      db:
        condition: service_started
  prod:
    container_name: football-predict-container_name-prod
    image: ${REGISTRY}/${IMAGE_NAME}
    environment:
      - REGISTRY=${REGISTRY}
      - IMAGE_NAME=${IMAGE_NAME}
    env_file:
      - .env
    labels:
      caddy: predict.naijaanswers.com
      caddy.reverse_proxy: "{{upstreams 2025}}"
    networks:
      - db_network
      - caddy
    depends_on:
      db:
        condition: service_started
  db:
    image: postgres
    restart: always
    user: postgres
    volumes:
      - ./docker-entrypoint-initdb.d/init-user-db.sh:/docker-entrypoint-initdb.d/init-user-db.sh
      - db-data:/var/lib/postgresql/data
    environment:
      - PG_DB=${PG_DB}
      - PG_USER=${PG_USER}
      - POSTGRES_USER=${PG_USER}
      - POSTGRES_DB=${PG_DB}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    env_file:
      - .env
    expose:
      - 5432
    networks:
      - db_network
    healthcheck:
      test: ['CMD', 'pg_isready']
volumes:
  db-data:
networks:
  db_network:
  caddy:
    external: true
